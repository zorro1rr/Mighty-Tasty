{"version":3,"sources":["components/SearchBar/favicon.ico","searchy.gif","components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","sortByOptions","SearchBar","props","handleKeyPress","event","key","handleSearch","state","term","location","sortBy","userLocation","handleTermChange","bind","handleLocationChange","getLocation","this","setState","target","value","searchYelp","preventDefault","document","querySelector","style","searchy","BusinessList","sortByOption","Object","keys","map","i","sortByOptionValue","onClick","handleSortByChange","className","getSortByClass","fetch","response","json","jsonResponse","city","id","src","require","alt","renderSortByOptions","onKeyPress","placeholder","onChange","React","Component","Business","business","href","imageSrc","rel","name","address","zipCode","category","phone","yelp","rating","reviewCount","businesses","Yelp","headers","Authorization","process","image_url","address1","zip_code","categories","title","review_count","url","App","then","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ff289dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.83942fdc.ico\";","module.exports = __webpack_public_path__ + \"static/media/searchy.e36b4ad9.gif\";","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nconst sortByOptions = {\r\n  \"Best Match\": \"best_match\",\r\n  \"Highest Rated\": \"rating\",\r\n  \"Most Reviewed\": \"review_count\",\r\n};\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //create state object with the keys:\r\n    //terms, location, sortBy for the search option inputs\r\n    this.state = {\r\n      term: \"\",\r\n      location: \"\",\r\n      sortBy: \"best_match\",\r\n      userLocation: \"\",\r\n    };\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.getLocation = this.getLocation.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  //methods to deal with input elements Terms and Location\r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term: event.target.value,\r\n    });\r\n  }\r\n  handleLocationChange(event) {\r\n    this.setState({\r\n      location: event.target.value,\r\n    });\r\n  }\r\n  //give the let's go button functionality\r\n  handleSearch(event) {\r\n    this.props.searchYelp(\r\n      this.state.term,\r\n      this.state.location,\r\n      this.state.sortBy\r\n    );\r\n    event.preventDefault();\r\n    const background = document.querySelector(\"html\");\r\n    background.style = \"height: 300px;\";\r\n    const searchy = document.querySelector(\"#businessDiv\");\r\n    const BusinessList = document.querySelector(\".BusinessList\");\r\n    searchy.style = \"display:none\";\r\n    BusinessList.style = \"display:inherit\";\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (sortByOption === this.state.sortBy) {\r\n      return \"active\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  handleSortByChange(sortByOption) {\r\n    this.setState({\r\n      sortBy: sortByOption,\r\n    });\r\n  }\r\n\r\n  //grab the keys in sortbyOptions and loop through them, returning as a <li> with event handlers.\r\n  renderSortByOptions() {\r\n    return Object.keys(sortByOptions).map((sortByOption, i) => {\r\n      let sortByOptionValue = sortByOptions[sortByOption];\r\n      return (\r\n        <div key={i} onClick={this.handleSearch}>\r\n          <p\r\n            key={sortByOptionValue}\r\n            onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n            className={this.getSortByClass(sortByOptionValue)}\r\n          >\r\n            {sortByOption}\r\n          </p>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  //Event handler so they can submit searches by pressing enter as well as clicking button\r\n  handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      this.handleSearch(event);\r\n    }\r\n  };\r\n\r\n  async getLocation() {\r\n    const response = await fetch(\"https://ipapi.co/json\");\r\n    const jsonResponse = await response.json();\r\n    this.setState({ userLocation: \"Search Location: \" + jsonResponse.city });\r\n    this.setState({ location: jsonResponse.city });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getLocation();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <nav id=\"nav\">\r\n          <div id=\"logo\">\r\n            <img src={require(\"./favicon.ico\")} alt=\"logo\" />\r\n\r\n            <h2>Mighty-Tasty!</h2>\r\n          </div>\r\n          <div className=\"SearchBar-sort-options\">\r\n            {this.renderSortByOptions()}\r\n          </div>\r\n        </nav>\r\n        <div className=\"SearchBar-fields\" onKeyPress={this.handleKeyPress}>\r\n          <input\r\n            placeholder=\"&#128270; Search Businesses\"\r\n            term=\"Search Businesses\"\r\n            onChange={this.handleTermChange}\r\n          />\r\n          <input\r\n            placeholder={this.state.userLocation}\r\n            onChange={this.handleLocationChange}\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"SearchBar-submit\"\r\n          onClick={this.handleSearch}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          Let's Go\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    const { business } = this.props;\r\n    return (\r\n      <div className=\"Business\">\r\n        <div className=\"image-container\">\r\n          <a href={business.imageSrc} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src={business.imageSrc} alt=\"business img\" />\r\n          </a>\r\n        </div>\r\n        <h2>{business.name}</h2>\r\n        <hr></hr>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <p>\r\n              <a\r\n                className=\"addy\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                href={\r\n                  \"https://www.google.com/maps/place/\" +\r\n                  business.address +\r\n                  \",\" +\r\n                  business.city +\r\n                  \",+\" +\r\n                  business.state +\r\n                  \"+\" +\r\n                  business.zipCode +\r\n                  \"/\"\r\n                }\r\n              >\r\n                {business.address} <br></br>\r\n                {business.city + \", \"} <br></br>{\" \"}\r\n                {business.state + \" \" + business.zipCode}\r\n              </a>\r\n            </p>\r\n          </div>\r\n          <div className=\"Business-reviews\">\r\n            <h3>{business.category}</h3>\r\n            <p>Phone:{business.phone}</p>\r\n            <a\r\n              href={business.yelp}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"rating\"\r\n            >\r\n              {business.rating} stars / {business.reviewCount} reviews\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;\r\n","import React from 'react'\r\nimport './BusinessList.css'\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render () {\r\n    return (\r\n    <div className=\"BusinessList\">\r\n      {\r\n      this.props.businesses.map( (business) => {\r\n        return <Business business={business} key={business.id}/>;\r\n      })\r\n      }\r\n  </div>\r\n      )\r\n    }\r\n};\r\n\r\nexport default BusinessList;","//store yelp api key\r\nconst apiKey = process.env.REACT_APP_KEY;\r\n\r\nconst Yelp = {\r\n  async searchYelp(term, location, sortBy) {\r\n    //Prepend the URL path with CORS Anywhere API to bypass CORS restrictions\r\n    //use string interpolation so parameters can be plugged into url\r\n    const response = await fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n      }\r\n    );\r\n    const jsonResponse = await response.json();\r\n    if (jsonResponse.businesses) {\r\n      //loop through the json response\r\n      return jsonResponse.businesses.map((business) => {\r\n        //make and object with all the business attributes to display\r\n        return {\r\n          id: business.id,\r\n          imageSrc: business.image_url,\r\n          name: business.name,\r\n          address: business.location.address1,\r\n          city: business.location.city,\r\n          state: business.location.state,\r\n          zipCode: business.location.zip_code,\r\n          category: business.categories[0].title,\r\n          rating: business.rating,\r\n          reviewCount: business.review_count,\r\n          phone: business.phone,\r\n          yelp: business.url,\r\n        };\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport SearchBar from \"./components/SearchBar/SearchBar\";\r\nimport BusinessList from \"./components/BusinessList/BusinessList\";\r\nimport Yelp from \"./util/Yelp\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //set the initial state\r\n    this.state = {\r\n      businesses: [],\r\n    };\r\n    //bind because searchYelp uses this.setState\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.searchYelp(term, location, sortBy).then((businesses) => {\r\n      this.setState({\r\n        businesses: businesses,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"background\">\r\n          <SearchBar searchYelp={this.searchYelp} />\r\n        </div>\r\n        <div id=\"businessDiv\">\r\n          <img src={require(\"./searchy.gif\")} alt=\"search gif\"></img>\r\n        </div>\r\n        <BusinessList businesses={this.state.businesses} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}